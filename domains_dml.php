<?php

// Data functions (insert, update, delete, form) for table domains

// This script and data application were generated by AppGini 23.13
// Download AppGini for free from https://bigprof.com/appgini/download/

function domains_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('domains');
	if(!$arrPerm['insert']) return false;

	$data = [
		'domain_name' => Request::val('domain_name', ''),
		'expired' => Request::checkBox('expired', '0'),
		'client' => Request::lookup('client', ''),
		'registrar' => Request::lookup('registrar', ''),
		'dns_manager' => Request::lookup('dns_manager', ''),
		'mail_provider' => Request::lookup('mail_provider', ''),
		'registration_date' => Request::dateComponents('registration_date', '1'),
		'next_renewal_date' => Request::dateComponents('next_renewal_date', '366'),
		'comments' => Request::val('comments', ''),
	];

	if($data['domain_name'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Domain name': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}

	// hook: domains_before_insert
	if(function_exists('domains_before_insert')) {
		$args = [];
		if(!domains_before_insert($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('domains', backtick_keys_once($data), $error);
	if($error) {
		$error_message = $error;
		return false;
	}

	$recID = $data['domain_name'];

	update_calc_fields('domains', $recID, calculated_fields()['domains']);

	// hook: domains_after_insert
	if(function_exists('domains_after_insert')) {
		$res = sql("SELECT * FROM `domains` WHERE `domain_name`='" . makeSafe($recID, false) . "' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args = [];
		if(!domains_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('domains', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(strlen(Request::val('SelectedID'))) domains_copy_children($recID, Request::val('SelectedID'));

	return $recID;
}

function domains_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function domains_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('domains', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: domains_before_delete
	if(function_exists('domains_before_delete')) {
		$args = [];
		if(!domains_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: '' 
			);
	}

	// child table: subdomains
	$res = sql("SELECT `domain_name` FROM `domains` WHERE `domain_name`='{$selected_id}'", $eo);
	$domain_name = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `subdomains` WHERE `domain`='" . makeSafe($domain_name[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'subdomains', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'subdomains', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'domains_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'domains_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: domain_events
	$res = sql("SELECT `domain_name` FROM `domains` WHERE `domain_name`='{$selected_id}'", $eo);
	$domain_name = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `domain_events` WHERE `domain`='" . makeSafe($domain_name[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'domain_events', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'domain_events', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="btn btn-danger" value="' . html_attr($Translation['yes']) . '" onClick="window.location = \'domains_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1&csrf_token=' . urlencode(csrf_token(false, true)) . '\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="btn btn-success" value="' . html_attr($Translation[ 'no']) . '" onClick="window.location = \'domains_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	sql("DELETE FROM `domains` WHERE `domain_name`='{$selected_id}'", $eo);

	// hook: domains_after_delete
	if(function_exists('domains_after_delete')) {
		$args = [];
		domains_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='domains' AND `pkValue`='{$selected_id}'", $eo);
}

function domains_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('domains', $selected_id, 'edit')) return false;

	$data = [
		'domain_name' => Request::val('domain_name', ''),
		'expired' => Request::checkBox('expired', ''),
		'client' => Request::lookup('client', ''),
		'registrar' => Request::lookup('registrar', ''),
		'dns_manager' => Request::lookup('dns_manager', ''),
		'mail_provider' => Request::lookup('mail_provider', ''),
		'registration_date' => Request::dateComponents('registration_date', ''),
		'next_renewal_date' => Request::dateComponents('next_renewal_date', ''),
		'comments' => Request::val('comments', ''),
	];

	if($data['domain_name'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Domain name': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	// get existing values
	$old_data = getRecord('domains', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: domains_before_update
	if(function_exists('domains_before_update')) {
		$args = ['old_data' => $old_data];
		if(!domains_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'domains', 
		backtick_keys_once($set), 
		['`domain_name`' => $selected_id], 
		$error_message
	)) {
		echo $error_message;
		echo '<a href="domains_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}

	$data['selectedID'] = $data['domain_name'];
	$newID = $data['domain_name'];

	$eo = ['silentErrors' => true];

	update_calc_fields('domains', $data['selectedID'], calculated_fields()['domains']);

	// hook: domains_after_update
	if(function_exists('domains_after_update')) {
		$res = sql("SELECT * FROM `domains` WHERE `domain_name`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['domain_name'];
		$args = ['old_data' => $old_data];
		if(!domains_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update ownership data
	sql("UPDATE `membership_userrecords` SET `dateUpdated`='" . time() . "', `pkValue`='{$data['domain_name']}' WHERE `tableName`='domains' AND `pkValue`='" . makeSafe($selected_id) . "'", $eo);

	// if PK value changed, update $selected_id
	$selected_id = $newID;
}

function domains_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $separateDV = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;
	$eo = ['silentErrors' => true];
	$noUploads = null;
	$row = $urow = $jsReadOnly = $jsEditable = $lookups = null;

	$noSaveAsCopy = false;

	// mm: get table permissions
	$arrPerm = getTablePermissions('domains');
	if(!$arrPerm['insert'] && $selected_id == '')
		// no insert permission and no record selected
		// so show access denied error unless TVDV
		return $separateDV ? $Translation['tableAccessDenied'] : '';
	$AllowInsert = ($arrPerm['insert'] ? true : false);
	// print preview?
	$dvprint = false;
	if(strlen($selected_id) && Request::val('dvprint_x') != '') {
		$dvprint = true;
	}

	$filterer_client = Request::val('filterer_client');
	$filterer_registrar = Request::val('filterer_registrar');
	$filterer_dns_manager = Request::val('filterer_dns_manager');
	$filterer_mail_provider = Request::val('filterer_mail_provider');

	// populate filterers, starting from children to grand-parents

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: client
	$combo_client = new DataCombo;
	// combobox: registrar
	$combo_registrar = new DataCombo;
	// combobox: dns_manager
	$combo_dns_manager = new DataCombo;
	// combobox: mail_provider
	$combo_mail_provider = new DataCombo;
	// combobox: registration_date
	$combo_registration_date = new DateCombo;
	$combo_registration_date->DateFormat = "dmy";
	$combo_registration_date->MinYear = defined('domains.registration_date.MinYear') ? constant('domains.registration_date.MinYear') : 1900;
	$combo_registration_date->MaxYear = defined('domains.registration_date.MaxYear') ? constant('domains.registration_date.MaxYear') : 2100;
	$combo_registration_date->DefaultDate = parseMySQLDate('1', '1');
	$combo_registration_date->MonthNames = $Translation['month names'];
	$combo_registration_date->NamePrefix = 'registration_date';
	// combobox: next_renewal_date
	$combo_next_renewal_date = new DateCombo;
	$combo_next_renewal_date->DateFormat = "dmy";
	$combo_next_renewal_date->MinYear = defined('domains.next_renewal_date.MinYear') ? constant('domains.next_renewal_date.MinYear') : 1900;
	$combo_next_renewal_date->MaxYear = defined('domains.next_renewal_date.MaxYear') ? constant('domains.next_renewal_date.MaxYear') : 2100;
	$combo_next_renewal_date->DefaultDate = parseMySQLDate('366', '366');
	$combo_next_renewal_date->MonthNames = $Translation['month names'];
	$combo_next_renewal_date->NamePrefix = 'next_renewal_date';

	if($selected_id) {
		if(!check_record_permission('domains', $selected_id, 'view'))
			return $Translation['tableAccessDenied'];

		// can edit?
		$AllowUpdate = check_record_permission('domains', $selected_id, 'edit');

		// can delete?
		$AllowDelete = check_record_permission('domains', $selected_id, 'delete');

		$res = sql("SELECT * FROM `domains` WHERE `domain_name`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'domains_view.php', false);
		}
		$combo_client->SelectedData = $row['client'];
		$combo_registrar->SelectedData = $row['registrar'];
		$combo_dns_manager->SelectedData = $row['dns_manager'];
		$combo_mail_provider->SelectedData = $row['mail_provider'];
		$combo_registration_date->DefaultDate = $row['registration_date'];
		$combo_next_renewal_date->DefaultDate = $row['next_renewal_date'];
		$urow = $row; /* unsanitized data */
		$row = array_map('safe_html', $row);
	} else {
		$filterField = Request::val('FilterField');
		$filterOperator = Request::val('FilterOperator');
		$filterValue = Request::val('FilterValue');
		$combo_client->SelectedData = $filterer_client;
		$combo_registrar->SelectedData = $filterer_registrar;
		$combo_dns_manager->SelectedData = $filterer_dns_manager;
		$combo_mail_provider->SelectedData = $filterer_mail_provider;
	}
	$combo_client->HTML = '<span id="client-container' . $rnd1 . '"></span><input type="hidden" name="client" id="client' . $rnd1 . '" value="' . html_attr($combo_client->SelectedData) . '">';
	$combo_client->MatchText = '<span id="client-container-readonly' . $rnd1 . '"></span><input type="hidden" name="client" id="client' . $rnd1 . '" value="' . html_attr($combo_client->SelectedData) . '">';
	$combo_registrar->HTML = '<span id="registrar-container' . $rnd1 . '"></span><input type="hidden" name="registrar" id="registrar' . $rnd1 . '" value="' . html_attr($combo_registrar->SelectedData) . '">';
	$combo_registrar->MatchText = '<span id="registrar-container-readonly' . $rnd1 . '"></span><input type="hidden" name="registrar" id="registrar' . $rnd1 . '" value="' . html_attr($combo_registrar->SelectedData) . '">';
	$combo_dns_manager->HTML = '<span id="dns_manager-container' . $rnd1 . '"></span><input type="hidden" name="dns_manager" id="dns_manager' . $rnd1 . '" value="' . html_attr($combo_dns_manager->SelectedData) . '">';
	$combo_dns_manager->MatchText = '<span id="dns_manager-container-readonly' . $rnd1 . '"></span><input type="hidden" name="dns_manager" id="dns_manager' . $rnd1 . '" value="' . html_attr($combo_dns_manager->SelectedData) . '">';
	$combo_mail_provider->HTML = '<span id="mail_provider-container' . $rnd1 . '"></span><input type="hidden" name="mail_provider" id="mail_provider' . $rnd1 . '" value="' . html_attr($combo_mail_provider->SelectedData) . '">';
	$combo_mail_provider->MatchText = '<span id="mail_provider-container-readonly' . $rnd1 . '"></span><input type="hidden" name="mail_provider" id="mail_provider' . $rnd1 . '" value="' . html_attr($combo_mail_provider->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_client__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['client'] : htmlspecialchars($filterer_client, ENT_QUOTES)); ?>"};
		AppGini.current_registrar__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['registrar'] : htmlspecialchars($filterer_registrar, ENT_QUOTES)); ?>"};
		AppGini.current_dns_manager__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['dns_manager'] : htmlspecialchars($filterer_dns_manager, ENT_QUOTES)); ?>"};
		AppGini.current_mail_provider__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['mail_provider'] : htmlspecialchars($filterer_mail_provider, ENT_QUOTES)); ?>"};

		jQuery(function() {
			setTimeout(function() {
				if(typeof(client_reload__RAND__) == 'function') client_reload__RAND__();
				if(typeof(registrar_reload__RAND__) == 'function') registrar_reload__RAND__();
				if(typeof(dns_manager_reload__RAND__) == 'function') dns_manager_reload__RAND__();
				if(typeof(mail_provider_reload__RAND__) == 'function') mail_provider_reload__RAND__();
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function client_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#client-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_client__RAND__.value, t: 'domains', f: 'client' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="client"]').val(resp.results[0].id);
							$j('[id=client-container-readonly__RAND__]').html('<span class="match-text" id="client-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=clients_view_parent]').hide(); } else { $j('.btn[id=clients_view_parent]').show(); }


							if(typeof(client_update_autofills__RAND__) == 'function') client_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'domains', f: 'client' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_client__RAND__.value = e.added.id;
				AppGini.current_client__RAND__.text = e.added.text;
				$j('[name="client"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=clients_view_parent]').hide(); } else { $j('.btn[id=clients_view_parent]').show(); }


				if(typeof(client_update_autofills__RAND__) == 'function') client_update_autofills__RAND__();
			});

			if(!$j("#client-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_client__RAND__.value, t: 'domains', f: 'client' },
					success: function(resp) {
						$j('[name="client"]').val(resp.results[0].id);
						$j('[id=client-container-readonly__RAND__]').html('<span class="match-text" id="client-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=clients_view_parent]').hide(); } else { $j('.btn[id=clients_view_parent]').show(); }

						if(typeof(client_update_autofills__RAND__) == 'function') client_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_client__RAND__.value, t: 'domains', f: 'client' },
				success: function(resp) {
					$j('[id=client-container__RAND__], [id=client-container-readonly__RAND__]').html('<span class="match-text" id="client-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=clients_view_parent]').hide(); } else { $j('.btn[id=clients_view_parent]').show(); }

					if(typeof(client_update_autofills__RAND__) == 'function') client_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function registrar_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#registrar-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_registrar__RAND__.value, t: 'domains', f: 'registrar' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="registrar"]').val(resp.results[0].id);
							$j('[id=registrar-container-readonly__RAND__]').html('<span class="match-text" id="registrar-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=registrars_view_parent]').hide(); } else { $j('.btn[id=registrars_view_parent]').show(); }


							if(typeof(registrar_update_autofills__RAND__) == 'function') registrar_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'domains', f: 'registrar' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_registrar__RAND__.value = e.added.id;
				AppGini.current_registrar__RAND__.text = e.added.text;
				$j('[name="registrar"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=registrars_view_parent]').hide(); } else { $j('.btn[id=registrars_view_parent]').show(); }


				if(typeof(registrar_update_autofills__RAND__) == 'function') registrar_update_autofills__RAND__();
			});

			if(!$j("#registrar-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_registrar__RAND__.value, t: 'domains', f: 'registrar' },
					success: function(resp) {
						$j('[name="registrar"]').val(resp.results[0].id);
						$j('[id=registrar-container-readonly__RAND__]').html('<span class="match-text" id="registrar-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=registrars_view_parent]').hide(); } else { $j('.btn[id=registrars_view_parent]').show(); }

						if(typeof(registrar_update_autofills__RAND__) == 'function') registrar_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_registrar__RAND__.value, t: 'domains', f: 'registrar' },
				success: function(resp) {
					$j('[id=registrar-container__RAND__], [id=registrar-container-readonly__RAND__]').html('<span class="match-text" id="registrar-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=registrars_view_parent]').hide(); } else { $j('.btn[id=registrars_view_parent]').show(); }

					if(typeof(registrar_update_autofills__RAND__) == 'function') registrar_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function dns_manager_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#dns_manager-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_dns_manager__RAND__.value, t: 'domains', f: 'dns_manager' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="dns_manager"]').val(resp.results[0].id);
							$j('[id=dns_manager-container-readonly__RAND__]').html('<span class="match-text" id="dns_manager-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=dns_managers_view_parent]').hide(); } else { $j('.btn[id=dns_managers_view_parent]').show(); }


							if(typeof(dns_manager_update_autofills__RAND__) == 'function') dns_manager_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'domains', f: 'dns_manager' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_dns_manager__RAND__.value = e.added.id;
				AppGini.current_dns_manager__RAND__.text = e.added.text;
				$j('[name="dns_manager"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=dns_managers_view_parent]').hide(); } else { $j('.btn[id=dns_managers_view_parent]').show(); }


				if(typeof(dns_manager_update_autofills__RAND__) == 'function') dns_manager_update_autofills__RAND__();
			});

			if(!$j("#dns_manager-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_dns_manager__RAND__.value, t: 'domains', f: 'dns_manager' },
					success: function(resp) {
						$j('[name="dns_manager"]').val(resp.results[0].id);
						$j('[id=dns_manager-container-readonly__RAND__]').html('<span class="match-text" id="dns_manager-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=dns_managers_view_parent]').hide(); } else { $j('.btn[id=dns_managers_view_parent]').show(); }

						if(typeof(dns_manager_update_autofills__RAND__) == 'function') dns_manager_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_dns_manager__RAND__.value, t: 'domains', f: 'dns_manager' },
				success: function(resp) {
					$j('[id=dns_manager-container__RAND__], [id=dns_manager-container-readonly__RAND__]').html('<span class="match-text" id="dns_manager-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=dns_managers_view_parent]').hide(); } else { $j('.btn[id=dns_managers_view_parent]').show(); }

					if(typeof(dns_manager_update_autofills__RAND__) == 'function') dns_manager_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function mail_provider_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#mail_provider-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_mail_provider__RAND__.value, t: 'domains', f: 'mail_provider' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="mail_provider"]').val(resp.results[0].id);
							$j('[id=mail_provider-container-readonly__RAND__]').html('<span class="match-text" id="mail_provider-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=mail_providers_view_parent]').hide(); } else { $j('.btn[id=mail_providers_view_parent]').show(); }


							if(typeof(mail_provider_update_autofills__RAND__) == 'function') mail_provider_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'domains', f: 'mail_provider' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_mail_provider__RAND__.value = e.added.id;
				AppGini.current_mail_provider__RAND__.text = e.added.text;
				$j('[name="mail_provider"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=mail_providers_view_parent]').hide(); } else { $j('.btn[id=mail_providers_view_parent]').show(); }


				if(typeof(mail_provider_update_autofills__RAND__) == 'function') mail_provider_update_autofills__RAND__();
			});

			if(!$j("#mail_provider-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_mail_provider__RAND__.value, t: 'domains', f: 'mail_provider' },
					success: function(resp) {
						$j('[name="mail_provider"]').val(resp.results[0].id);
						$j('[id=mail_provider-container-readonly__RAND__]').html('<span class="match-text" id="mail_provider-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=mail_providers_view_parent]').hide(); } else { $j('.btn[id=mail_providers_view_parent]').show(); }

						if(typeof(mail_provider_update_autofills__RAND__) == 'function') mail_provider_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_mail_provider__RAND__.value, t: 'domains', f: 'mail_provider' },
				success: function(resp) {
					$j('[id=mail_provider-container__RAND__], [id=mail_provider-container-readonly__RAND__]').html('<span class="match-text" id="mail_provider-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=mail_providers_view_parent]').hide(); } else { $j('.btn[id=mail_providers_view_parent]').show(); }

					if(typeof(mail_provider_update_autofills__RAND__) == 'function') mail_provider_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_clean());


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/domains_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/domains_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Domain details', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', (Request::val('Embedded') ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert) {
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return domains_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return domains_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if(Request::val('Embedded')) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!Request::val('Embedded')) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate)
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return domains_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		else
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);

		if($AllowDelete)
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		else
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);

		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);

		// if not in embedded mode and user has insert only but no view/update/delete,
		// remove 'back' button
		if(
			$arrPerm['insert']
			&& !$arrPerm['update'] && !$arrPerm['delete'] && !$arrPerm['view']
			&& !Request::val('Embedded')
		)
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
		elseif($separateDV)
			$templateCode = str_replace(
				'<%%DESELECT_BUTTON%%>', 
				'<button
					type="submit" 
					class="btn btn-default" 
					id="deselect" 
					name="deselect_x" 
					value="1" 
					onclick="' . $backAction . '" 
					title="' . html_attr($Translation['Back']) . '">
						<i class="glyphicon glyphicon-chevron-left"></i> ' .
						$Translation['Back'] .
				'</button>',
				$templateCode
			);
		else
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly = '';
		$jsReadOnly .= "\tjQuery('#domain_name').replaceWith('<div class=\"form-control-static\" id=\"domain_name\">' + (jQuery('#domain_name').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#expired').prop('disabled', true);\n";
		$jsReadOnly .= "\tjQuery('#client').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#client_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#registrar').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#registrar_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#dns_manager').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#dns_manager_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#mail_provider').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#mail_provider_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#registration_date').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#registration_dateDay, #registration_dateMonth, #registration_dateYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#next_renewal_date').prop('readonly', true);\n";
		$jsReadOnly .= "\tjQuery('#next_renewal_dateDay, #next_renewal_dateMonth, #next_renewal_dateYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	} elseif($AllowInsert) {
		$jsEditable = "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(client)%%>', $combo_client->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(client)%%>', $combo_client->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(client)%%>', urlencode($combo_client->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(registrar)%%>', $combo_registrar->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(registrar)%%>', $combo_registrar->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(registrar)%%>', urlencode($combo_registrar->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(dns_manager)%%>', $combo_dns_manager->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(dns_manager)%%>', $combo_dns_manager->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(dns_manager)%%>', urlencode($combo_dns_manager->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(mail_provider)%%>', $combo_mail_provider->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(mail_provider)%%>', $combo_mail_provider->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(mail_provider)%%>', urlencode($combo_mail_provider->MatchText), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(registration_date)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_registration_date->GetHTML(true) . '</div>' : 
			$combo_registration_date->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(registration_date)%%>', $combo_registration_date->GetHTML(true), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(next_renewal_date)%%>', 
		($selected_id && !$arrPerm['edit'] && ($noSaveAsCopy || !$arrPerm['insert']) ? 
			'<div class="form-control-static">' . $combo_next_renewal_date->GetHTML(true) . '</div>' : 
			$combo_next_renewal_date->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(next_renewal_date)%%>', $combo_next_renewal_date->GetHTML(true), $templateCode);

	/* lookup fields array: 'lookup field name' => ['parent table name', 'lookup field caption'] */
	$lookup_fields = ['client' => ['clients', 'Client'], 'registrar' => ['registrars', 'Registrar'], 'dns_manager' => ['dns_managers', 'DNS manager'], 'mail_provider' => ['mail_providers', 'Mail provider'], ];
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] /* && !Request::val('Embedded')*/) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-default add_new_parent" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus text-success"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(domain_name)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(expired)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(client)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(registrar)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(dns_manager)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(mail_provider)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(registration_date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(next_renewal_date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(comments)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(domain_name)%%>', safe_html($urow['domain_name']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(domain_name)%%>', html_attr($row['domain_name']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(domain_name)%%>', urlencode($urow['domain_name']), $templateCode);
		$templateCode = str_replace('<%%CHECKED(expired)%%>', ($row['expired'] ? "checked" : ""), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(client)%%>', safe_html($urow['client']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(client)%%>', html_attr($row['client']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(client)%%>', urlencode($urow['client']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(registrar)%%>', safe_html($urow['registrar']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(registrar)%%>', html_attr($row['registrar']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(registrar)%%>', urlencode($urow['registrar']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(dns_manager)%%>', safe_html($urow['dns_manager']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(dns_manager)%%>', html_attr($row['dns_manager']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(dns_manager)%%>', urlencode($urow['dns_manager']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(mail_provider)%%>', safe_html($urow['mail_provider']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(mail_provider)%%>', html_attr($row['mail_provider']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(mail_provider)%%>', urlencode($urow['mail_provider']), $templateCode);
		$templateCode = str_replace('<%%VALUE(registration_date)%%>', app_datetime($row['registration_date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(registration_date)%%>', urlencode(app_datetime($urow['registration_date'])), $templateCode);
		$templateCode = str_replace('<%%VALUE(next_renewal_date)%%>', app_datetime($row['next_renewal_date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(next_renewal_date)%%>', urlencode(app_datetime($urow['next_renewal_date'])), $templateCode);
		if($AllowUpdate || $AllowInsert) {
			$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<textarea name="comments" id="comments" rows="5">' . safe_html(htmlspecialchars_decode($row['comments'])) . '</textarea>', $templateCode);
		} else {
			$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<div id="comments" class="form-control-static">' . $row['comments'] . '</div>', $templateCode);
		}
		$templateCode = str_replace('<%%VALUE(comments)%%>', nl2br($row['comments']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(comments)%%>', urlencode($urow['comments']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(domain_name)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(domain_name)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%CHECKED(expired)%%>', '', $templateCode);
		$templateCode = str_replace('<%%VALUE(client)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(client)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(registrar)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(registrar)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(dns_manager)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(dns_manager)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(mail_provider)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(mail_provider)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(registration_date)%%>', '1', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(registration_date)%%>', urlencode('1'), $templateCode);
		$templateCode = str_replace('<%%VALUE(next_renewal_date)%%>', '366', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(next_renewal_date)%%>', urlencode('366'), $templateCode);
		$templateCode = str_replace('<%%HTMLAREA(comments)%%>', '<textarea name="comments" id="comments" rows="5"></textarea>', $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if(Request::val('dvprint_x') == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields
	$filterField = Request::val('FilterField');
	$filterOperator = Request::val('FilterOperator');
	$filterValue = Request::val('FilterValue');

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('domains');
	if($selected_id) {
		$jdata = get_joined_record('domains', $selected_id);
		if($jdata === false) $jdata = get_defaults('domains');
		$rdata = $row;
	}
	$templateCode .= loadView('domains-ajax-cache', ['rdata' => $rdata, 'jdata' => $jdata]);

	// hook: domains_dv
	if(function_exists('domains_dv')) {
		$args = [];
		domains_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}